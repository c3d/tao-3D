// *****************************************************************************
// options2.tbl                                                    Tao3D project
// *****************************************************************************
//
// File description:
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2010, Catherine Burvelle <catherine@taodyne.com>
// (C) 2010-2014,2018-2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2010-2013, Jérôme Forissier <jerome@taodyne.com>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************
// ============================================================================
//
//   Tao options, in addition to the ones defined in xlr/options.tbl
//
// ============================================================================

OPTVAR(sync_interval, ulong,   500)
OPTVAR(save_interval, ulong,   1000)
OPTVAR(commit_interval, ulong, 5000)
OPTVAR(pull_interval, ulong, 5000)
#ifdef CFG_NORELOAD
OPTION(autosync, "Not used", )
#else
OPTION(autosync, "Interval for automatic file sync in milliseconds",
       sync_interval = INTEGER(10, 100000))
#endif
OPTION(autosave, "Interval for automatic save in milliseconds",
       save_interval = INTEGER(1000, 100000))
OPTION(autocommit, "Interval for automatic commit in milliseconds",
       commit_interval = INTEGER(1000, 100000))
OPTION(autopull, "Interval for automatic pull in milliseconds",
       pull_interval = INTEGER(1000, 100000))

OPTION(nosplash, "Disable splash screen", ;)

OPTVAR(transparent, bool, false)
OPTION(transparent, "Make window transparent", transparent = true)
OPTION(opaque, "Make window opaque", transparent = false)
OPTVAR(nowindow, bool, false)
OPTION(nowindow, "Disable window borders", nowindow = true)

OPTVAR(slideshow, bool, false)
OPTION(slideshow, "Open document in slide show (full screen) mode",
       slideshow = true)
OPTION(fs, "Open document in slide show (full screen) mode",
       slideshow = true)

OPTVAR(enable_modules, bool, true)
OPTION(nomodules, "Disable modules", enable_modules = false)

OPTVAR(printResolution, uint, 300)
OPTION(print_resolution, "Set printer resolution in DPI",
       printResolution = INTEGER(72, 3600))

OPTVAR(rendering_options, text, "-")
OPTION(render,
       "Offline rendering: -render pagenum,width,height,start-time,"
       "duration,page-time-offset,fps,folder[,display-mode]. "
       "Render frames and exit. Single document only."
       "Set 'display-mode' to 'help' "
       "for a list of all available modes.",
       rendering_options = STRING)
OPTVAR(display_mode, text, "")
OPTION(display ,
       "Select display mode, e.g hsplit_stereo."
       "Set 'display-mode' to 'help' "
       "for a list of all available modes.",
       display_mode = STRING)

#ifdef CFG_NOGIT
OPTION(norepo, "Not used", ;)
OPTION(nogit, "Not used", ;)
#else
OPTION(norepo, "Disable GIT repository", ;)
OPTION(nogit, "Synonym for -norepo", ;)
#endif

OPTVAR(threaded_gc, bool, true)
OPTION(nomtgc, "Do not run XL garbage collection in a separate thread", threaded_gc = false)

#ifdef CFG_WITH_EULA
OPTION(reset-eula, "Show End-User License Agreement on next run", ;)
#endif

OPTION(version, "Print program version and exit", ;)
OPTION(glinfo, "Print information about the OpenGL implementation detected by the program, "
                "and exit. Includes: vendor, renderer, version and supported extensions.", ;)

OPTION(oneinstance, "Run in client/server mode: first instance is the server, "
                      "subsequent instances send any file path to the server and exit", ;)

OPTION(fontpath, "Load fonts from the specified directory. "
                 "This option may appear multiple times to provide "
                 "several paths.", STRING) /* Parsed in Application class */

OPTVAR(tcache_savecomp, bool, false)
OPTION(savect, "Save compressed textures to disk so that the document loads "
               "faster the next time it is open (if texture compression is "
               "enabled in the preferences)", tcache_savecomp = true)

OPTVAR(preload_files, text, "")
OPTION(preload, "Preload file before document. Files are loaded after builtins.xl and tao.xl "
       "but before user.xl and theme.xl. . When the option is used multiple times, files "
       "are loaded in the order they appear on the command line.",
       preload_files += STRING; preload_files += ":")

OPTVAR(license_dirs, text, "")
OPTION(licpath, "Look for license files in the specified directory, in addition to the "
       "installation and user directories. This option may be used multiple times.",
       license_dirs += STRING; license_dirs += ":")

OPTVAR(to_stderr, text, "auto")
OPTION(stderr, "Define when to send error messages to stderr. Possible values are: "
       "auto: [default] Send errors to stderr when program runs in fullscreen mode only; "
       "on: Always send errors to stderr; off: Never send errors to stderr.",
       to_stderr = STRING)

OPTVAR(proofOfPlayFile, text, "")
OPTVAR(proofOfPlayInterval, uint, 493)
OPTVAR(proofOfPlayWidth, uint, 800)
OPTVAR(proofOfPlayHeight, uint, 600)
OPTION(proof_interval,
       "Set the interval between proof-of-play recordings in milliseconds",
       proofOfPlayInterval = INTEGER(250, 86400000))
OPTION(proof_width, "Set max width for of proof-of-play pictures",
       proofOfPlayWidth = INTEGER(32, 2048))
OPTION(proof_height, "Set max height for of proof-of-play pictures",
       proofOfPlayHeight = INTEGER(32, 2048))
OPTION(proof,
       "Set the file name for recording proof-of-play pictures",
       proofOfPlayFile = STRING)
