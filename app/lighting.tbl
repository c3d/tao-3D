// ****************************************************************************
//  lighting.tbl                                                    Tao project
// ****************************************************************************
//
//   File Description:
//
//      Description of lighting primitives
//
//
//
//
//
//
//
//
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html and Matthew 25:22 for details
//  (C) 2011 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2011 Taodyne SAS
// ****************************************************************************

#include "color_attribute.h"


// ============================================================================
//
//   Lighting
//
// ============================================================================

PREFIX(LightsMask,  tree,  "lights_mask",,
       RTAO(lightsMask(self)),
       GROUP(lighting)
       SYNOPSIS("Return a bitmask of all current activated lights")
       DESCRIPTION("Return a bitmask of all current activated lights")
       RETURNS(tree, "Return a bitmask of all current activated lights"))
PREFIX(PerPixelLighting,  tree,  "per_pixel_lighting",
       PARM(b, boolean,),
       RTAO(perPixelLighting(self, b)),
       GROUP(lighting)
       SYNOPSIS("Enable or disable per pixel lighting")
       DESCRIPTION(""))

PREFIX(LightID, tree, "light", PARM(l, integer,) PARM(b, boolean,),
       RTAO(lightId(self, l, b)),
       GROUP(lighting)
       SYNOPSIS("Select which light we are working with")
       DESCRIPTION(""))
PREFIX(LightEnable, tree, "light", PARM(l, integer,),
       RTAO(lightId(self, l, true)),
       GROUP(lighting)
       SYNOPSIS("Select which light we are working with")
       DESCRIPTION(""))

#undef  XPARM
#undef  XARGS
#define XPARM(a, b, c)
#define XARGS(p)
COLOR_ATTRIBUTE(LightAmbient,  "light_ambient",  lightAmbient)
COLOR_ATTRIBUTE(LightDiffuse,  "light_diffuse",  lightDiffuse)
COLOR_ATTRIBUTE(LightSpecular, "light_specular", lightSpecular)

PREFIX(LightPosition3, tree, "light_position",
       PARM(x, real,) PARM(y, real,) PARM(z, real,),
       RTAO(light(self, GL_POSITION, x, y, z, 0)),
       GROUP(lighting)
       SYNOPSIS("Select the position of the light")
       DESCRIPTION(""))
PREFIX(LightPosition, tree, "light_position",
       PARM(x, real,) PARM(y, real,) PARM(z, real,) PARM(w, real,),
       RTAO(light(self, GL_POSITION, x, y, z, w)),
       GROUP(lighting)
       SYNOPSIS("Select the position of the light")
       DESCRIPTION(""))
PREFIX(LightSpotDirection, tree, "light_spot_direction",
       PARM(x, real,) PARM(y, real,) PARM(z, real,),
       RTAO(light(self, GL_SPOT_DIRECTION, x, y, z)),
       GROUP(lighting)
       SYNOPSIS("Select the direction of spot lights")
       DESCRIPTION(""))
PREFIX(LightSpotExponent, tree, "light_spot_exponent", PARM(x, real,),
       RTAO(light(self, GL_SPOT_EXPONENT, x)),
       GROUP(lighting)
       SYNOPSIS("Select the cutoff exponent for spot lights")
       DESCRIPTION(""))
PREFIX(LightSpotCutoff, tree, "light_spot_cutoff", PARM(x, real,),
       RTAO(light(self, GL_SPOT_CUTOFF, x)),
       GROUP(lighting)
       SYNOPSIS("Select the cutoff angle for spot lights")
       DESCRIPTION(""))
PREFIX(LightAttenuation, tree, "light_attenuation",
       PARM(x, real,) PARM(y, real,) PARM(z, real,),
       TAO(light(self, GL_CONSTANT_ATTENUATION, x));
       TAO(light(self, GL_LINEAR_ATTENUATION, y));
       TAO(light(self, GL_QUADRATIC_ATTENUATION, z));
       return XL::xl_true,
       GROUP(lighting)
       SYNOPSIS("Select the light attenuation factor")
       DESCRIPTION(""))

COLOR_ATTRIBUTE(MaterialAmbient,  "material_ambient",  materialAmbient)
COLOR_ATTRIBUTE(MaterialDiffuse,  "material_diffuse",  materialDiffuse)
COLOR_ATTRIBUTE(MaterialSpecular, "material_specular", materialSpecular)
COLOR_ATTRIBUTE(MaterialEmission, "material_emission", materialEmission)

COLOR_ATTRIBUTE(MaterialAmbientF,  "material_front_ambient",  materialAmbientF)
COLOR_ATTRIBUTE(MaterialDiffuseF,  "material_front_diffuse",  materialDiffuseF)
COLOR_ATTRIBUTE(MaterialSpecularF, "material_front_specular", materialSpecularF)
COLOR_ATTRIBUTE(MaterialEmissionF, "material_front_emission", materialEmissionF)

COLOR_ATTRIBUTE(MaterialAmbientB,  "material_back_ambient",  materialAmbientB)
COLOR_ATTRIBUTE(MaterialDiffuseB,  "material_back_diffuse",  materialDiffuseB)
COLOR_ATTRIBUTE(MaterialSpecularB, "material_back_specular", materialSpecularB)
COLOR_ATTRIBUTE(MaterialEmissionB, "material_back_emission", materialEmissionB)

PREFIX(MaterialShininess, tree, "material_shininess", PARM(x, real,),
       RTAO(material(self, GL_FRONT_AND_BACK, GL_SHININESS, x)),
       GROUP(lighting)
       SYNOPSIS("Select the shininess of the material")
       DESCRIPTION(""))
PREFIX(MaterialFrontShininess, tree, "material_front_shininess", PARM(x, real,),
       RTAO(material(self, GL_FRONT, GL_SHININESS, x)),
       GROUP(lighting)
       SYNOPSIS("Select the shininess of the material")
       DESCRIPTION(""))
PREFIX(MaterialBackShininess, tree, "material_back_shininess", PARM(x, real,),
       RTAO(material(self, GL_BACK, GL_SHININESS, x)),
       GROUP(lighting)
       SYNOPSIS("Select the shininess of the material")
       DESCRIPTION(""))

PREFIX(ShaderProgram, tree, "shader_program", PARM(program, code,),
       RTAO(shaderProgram(context, self, program)),
       GROUP(lighting)
       SYNOPSIS("Define a shader program")
       DESCRIPTION(""))
PREFIX(VertexShaderFromSource, tree, "vertex_shader", PARM(src, text,),
       RTAO(shaderFromSource(self, Tao::Widget::VERTEX, src)),
       GROUP(lighting)
       SYNOPSIS("Define a vertex shader")
       DESCRIPTION(""))
PREFIX(VertexShaderFromFile, tree, "vertex_shader_file", PARM(file, text,),
       RTAO(shaderFromFile(context, self, Tao::Widget::VERTEX, file)),
       GROUP(lighting)
       SYNOPSIS("Define a vertex shader")
       DESCRIPTION(""))
PREFIX(FragmentShaderFromSource, tree, "fragment_shader",
       PARM(src, text, "Source code for the fragment shader"),
       RTAO(shaderFromSource(self, Tao::Widget::FRAGMENT, src)),
       GROUP(graph:shading)
       SYNOPSIS("Define a fragment shader"))
PREFIX(FragmentShaderFromFile, tree, "fragment_shader_file",
       PARM(file, text, "Name of fragment shader file"),
       RTAO(shaderFromFile(context, self, Tao::Widget::FRAGMENT, file)),
       GROUP(graph:shading)
       SYNOPSIS("Load a fragment shader from a file"))
PREFIX(GeometryShaderFromSource, tree, "geometry_shader",
       PARM(src, text, "Source code for the shader"),
       RTAO(shaderFromSource(self, Tao::Widget::GEOMETRY, src)),
       GROUP(graph:shading)
       SYNOPSIS("Define a geometry shader"))
PREFIX(GeometryShaderFromFile, tree, "geometry_shader_file",
       PARM(file, text, "File name for the shader"),
       RTAO(shaderFromFile(context, self, Tao::Widget::GEOMETRY, file)),
       GROUP(graph:shading)
       SYNOPSIS("Define a geometry shader"))
PREFIX(ShaderLog, text, "shader_log", , RTAO(shaderLog(self)),
       GROUP(graph:shading)
       SYNOPSIS("Return the shader compilation log")
       DESCRIPTION(""))
PREFIX(GeometryInputType, integer, "geometry_shader_input", ,
       RTAO(geometryInputType(self)),
       SYNOPSIS("Get geometry shader input type")
       GROUP(graph:shading)
       DESCRIPTION(""))
PREFIX(SetGeometryInputType, boolean, "geometry_shader_input",
       PARM(type, integer, "Input type"),
       RTAO(setGeometryInputType(self, type)),
       GROUP(graph:shading)
       SYNOPSIS("Set geometry shader input type")
       DESCRIPTION(""))
PREFIX(GeometryOutputType, integer, "geometry_shader_output", ,
       RTAO(geometryOutputType(self)),
       SYNOPSIS("Get geometry shader output type")
       GROUP(graph:shading)
       DESCRIPTION(""))
PREFIX(SetGeometryOutputType, boolean, "geometry_shader_output",
       PARM(type, integer, "Output type"),
       RTAO(setGeometryOutputType(self, type)),
       GROUP(graph:shading)
       SYNOPSIS("Set geometry shader output type")
       DESCRIPTION(""))
PREFIX(GeometryOutputCount, integer, "geometry_shader_count", ,
       RTAO(geometryOutputCount(self)),
       SYNOPSIS("Get geometry shader vertices count")
       GROUP(graph:shading)
       DESCRIPTION(""))
PREFIX(SetGeometryOutputCount, boolean, "geometry_shader_count",
       PARM(count, integer, "output count"),
       RTAO(setGeometryOutputCount(self, count)),
       GROUP(graph:shading)
       SYNOPSIS("Set geometry shader vertices count")
       DESCRIPTION(""))
PREFIX(ShaderSet, tree, "shader_set",
       PARM(t, source, "Assignment to a shader variable"),
       RTAO(shaderSet(context, self, t)),
       GROUP(lighting)
       SYNOPSIS("Set a shader uniform or attribute value")
       DESCRIPTION(""));
PREFIX(DisplaySet, tree, "display_set",
       PARM(t, source, "Assignment to a display variable"),
       RTAO(displaySet(context, self, t)),
       SYNOPSIS("Set an option in the current display function/module")
       DESCRIPTION(""));

