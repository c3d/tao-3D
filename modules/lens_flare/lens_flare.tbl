// *****************************************************************************
// lens_flare.tbl                                                  Tao3D project
// *****************************************************************************
//
// File description:
//
//     Definition of the interface between XLR and native code
//     for the "lens flare" module.
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2012,2014,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2011, Soulisse Baptiste <soulisse@polytech.unice.fr>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

PREFIX(LensFlare,  tree, "lens_flare",
       PARM(p, code, "The program that represent the content of the frame"),
       return lens_flare(context, self, p),
       GROUP(module.LensFlare)
       SYNOPSIS("Produce a lens flare")
       DESCRIPTION("Produce a lens flare. "
                   "This effect is defined by its source, its target, and its flares, "
                   "specified in the @p tree."))

PREFIX(LensFlareSource,  tree, "lens_flare_source",
       PARM(x, real, "x-coordinate of the lens flare source")
       PARM(y, real, "y-coordinate of the lens flare source")
       PARM(z, real, "z-coordinate of the lens flare source"),
       return lens_flare_source(self, x, y, z),
       GROUP(module.LensFlare)
       SYNOPSIS("Set the lens flare source")
       DESCRIPTION("Set the lens flare source."))

PREFIX(LensFlareTarget,  tree, "lens_flare_target",
       PARM(x, real, "x-coordinate of the lens flare target")
       PARM(y, real, "y-coordinate of the lens flare target")
       PARM(z, real, "z-coordinate of the lens flare target"),
       return lens_flare_target(self, x, y, z),
       GROUP(module.LensFlare)
       SYNOPSIS("Set the lens flare target")
       DESCRIPTION("Set the lens flare target."))

PREFIX(AddFlare,  tree, "add_flare",
       PARM(id, integer, "id of the flare")
       PARM(loc, real, "location of the flare")
       PARM(scale, real, "scale of the flare")
       PARM(r, real, "The red componant of the color")
       PARM(g, real, "The blue componant of the color")
       PARM(b, real, "The green componant of the color")
       PARM(a, real, "Alpha channel: the transparency of the color. "),
       return add_flare(self, id, loc, scale, r, g, b, a),
       GROUP(module.LensFlare)
       SYNOPSIS("Add a flare to the current effect")
       DESCRIPTION("Add a flare to the current lens flare. "
                   "This flare is defined by its texture @a id,"
                   "its relative @a location, its @a scale, "
                   "and its @a color."))

PREFIX(LensFlareDepthTest,  tree, "lens_flare_depth_test",
       PARM(mode, symbol, "on or off"),
       return lens_flare_depth_test(self, mode),
       GROUP(module.LensFlare)
       SYNOPSIS("Enable or disable depth test on lens flare")
       DESCRIPTION("Enable or disable depth test on lens flare. "
                   "This depth test is defined specifically for this effect."))
