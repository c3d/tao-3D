// *****************************************************************************
// regexp.tbl                                                      Tao3D project
// *****************************************************************************
//
// File description:
//
//     Definition of the interface between XLR and native code for
//     the "RegExp" module.
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2012,2014,2019, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

PREFIX(RegExpMatch,  boolean, "regexp_match",
       PARM(InputValue, text, )
       PARM(Pattern, text, ),
       return regexpMatch(context, self, InputValue, Pattern),
       GROUP(module.RegExp)
       SYNOPSIS("Return true of a text matches a regexp"))

INFIX(RegExpMatchInfix,  boolean, text, "matches", text,
       return regexpMatch(context, self, l, r),
       GROUP(module.RegExp)
       SYNOPSIS("Return true of a text matches a regexp"))

PREFIX(RegExpSearch,  integer, "regexp_search",
       PARM(InputValue, text, )
       PARM(Pattern, text, ),
       return regexpSearch(context, self, InputValue, Pattern),
       GROUP(module.RegExp)
       SYNOPSIS("Return position of a regexp in a text, or -1"))

PREFIX(RegExpParse,  tree, "regexp_parse",
       PARM(InputValue, text, )
       PARM(Code, tree, ),
       return regexpParse(context, self, InputValue, &Code, REGEXP_FIRST),
       GROUP(module.RegExp)
       SYNOPSIS("Analyze text using regular expressions"))
PREFIX(RegExpParseLast,  tree, "regexp_parse_last",
       PARM(InputValue, text, )
       PARM(Code, tree, ),
       return regexpParse(context, self, InputValue, &Code, REGEXP_LAST),
       GROUP(module.RegExp)
       SYNOPSIS("Analyze text using regular expressions"))
PREFIX(RegExpParseList,  tree, "regexp_parse_all",
       PARM(InputValue, text, )
       PARM(Code, tree, ),
       return regexpParse(context, self, InputValue, &Code, REGEXP_LIST),
       GROUP(module.RegExp)
       SYNOPSIS("Analyze text using regular expressions"))
PREFIX(RegExpParseText,  tree, "regexp_parse_text",
       PARM(InputValue, text, )
       PARM(Code, tree, ),
       return regexpParse(context, self, InputValue, &Code, REGEXP_TEXT),
       GROUP(module.RegExp)
       SYNOPSIS("Analyze text using regular expressions"))

PREFIX(RegExpAt,  tree, "regexp_captured",
       PARM(Index, integer, ),
       return regexpAt(context, self, Index),
       GROUP(module.RegExp)
       SYNOPSIS("Return the nth capture."))

PREFIX(RegExpPosition,  tree, "regexp_position",
       PARM(Index, integer, ),
       return regexpPos(context, self, Index),
       GROUP(module.RegExp)
       SYNOPSIS("Return the nth position."))

PREFIX(RegExpMatchedLength,  tree, "regexp_matched_length", ,
       return regexpMatchedLength(context, self),
       GROUP(module.RegExp)
       SYNOPSIS("Return the matched length."))

PREFIX(RegExpEscape,  text, "regexp_escape",
       PARM(Value, text, ),
       return regexpEscape(context, self, Value),
       GROUP(module.RegExp)
       SYNOPSIS("Escape a text for use in regexps."))

